name: "Build MacOS"
on:
  pull_request:
  push:
    branches:
      - main

jobs:
  publish-tauri:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest]
        arch: [Intel]

    runs-on: [self-hosted, macOS, X64]
#     runs-on: ${{ matrix.platform }}
    
    environment: Signing

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          
      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgGitCommitId: 49931943abe2a22dd9d91be2c4928ead56349b14

      - name: Download Model
        run: wget -O md_v5a.0.0.onnx https://github.com/bencevans/megadetector-onnx/releases/download/v0.1.0/md_v5a.0.0-640x640.onnx

      - name: Build OpenCV 4
        run: "${{env.VCPKG_ROOT}}/vcpkg install opencv4[dnn]"

      - name: Cache Rust / Cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-${{runner.arch}}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{runner.arch}}-cargo-

      - name: Build App
        run: npm install && OPENCV_DISABLE_PROBES=pkg_config,cmake npm run tauri build -- --features builtin

      - uses: actions/upload-artifact@v3
        if: ${{ env.ACTIONS_RUNNER_DEBUG }}
        with:
          name: CamTrap Detector MacOS Intel.dmg
          path: src-tauri/target/release/bundle/dmg/*.dmg
          
      - name: Remove Bundles to Reduce Cache
        run: rm -rf src-tauri/target/release/bundle/

      # - uses: tauri-apps/tauri-action@v0
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
      #     APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
      #     APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      #     APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      #   with:
      #     tauriScript: npm run tauri --
      #     args: --features builtin
      #     tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
      #     releaseName: 'App v__VERSION__'
      #     releaseBody: 'See the assets to download this version and install.'
      #     releaseDraft: true
      #     prerelease: false

